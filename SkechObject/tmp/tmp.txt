bit const0change = ??;
 int Const0(){
if(const0change == 1){
return ??;}else{
return 2;}
}
bit const1change = ??;
 int Const1(){
if(const1change == 1){
return ??;}else{
return 5;}
}

int[6] lineArray;
int[6] aArray = {0,0,0,0,0,0};
int[6] bArray = {0,0,0,0,0,0};
int[6] cArray = {0,0,0,0,0,0};


int cfinal = 0;
int finalcount = 0;

 int SimpleJava(){
int count = 0;
int linehit = 0;
int a = Const0();
(count)++;
lineArray[count] = 1;
aArray[count] = a;


int b = Const1();
(count)++;
lineArray[count] = 2;
aArray[count] = a;
bArray[count] = b;


int c = a + b;
(count)++;
lineArray[count] = 3;
(linehit)++;
if(linehit == 1){
cfinal = c;
finalcount = count;
}

aArray[count] = a;
bArray[count] = b;
cArray[count] = c;


return c;


}
harness void HammingTest(){
int[3] oringianlaArray = {2,2,2};
int[3] oringianlbArray = {0,5,5};
int[3] oringianlcArray = {0,0,7};
int correctFinal_c = 8;
SimpleJava();
int HammingDistance = 0;
for(int i = 0; i < 3; (i)++){
if(const0change == 0){
HammingDistance = (aArray[i]) != (oringianlaArray[i]);}

if(const1change == 0){
HammingDistance = (bArray[i]) != (oringianlbArray[i]);}

HammingDistance = (cArray[i]) != (oringianlcArray[i]);
}

assert (cfinal == correctFinal_c);
assert ((const0change + const1change) == 1);
minimize(HammingDistance);
}