bit line3change = 0;
bit line4change = 0;
bit line5change = 0;
bit line10change = 0;
bit line11change = 0;
bit line12change = 0;

bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff1change = ??;
 int Coeff1(){
if(??){
return 0;}

return coeff1change;
}

bit coeff2change = ??;
 int Coeff2(){
if(coeff2change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff3change = ??;
 int Coeff3(){
if(coeff3change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff4change = ??;
 int Coeff4(){
if(coeff4change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff5change = ??;
 int Coeff5(){
if(??){
return 0;}

return coeff5change;
}

bit coeff6change = ??;
 int Coeff6(){
if(coeff6change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff7change = ??;
 int Coeff7(){
if(coeff7change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff8change = ??;
 int Coeff8(){
if(coeff8change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff9change = ??;
 int Coeff9(){
if(??){
return 0;}

return coeff9change;
}

bit coeff10change = ??;
 int Coeff10(){
if(coeff10change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff11change = ??;
 int Coeff11(){
if(coeff11change == 0){
return 1;}

if(??){
return 0;}

return -1;
}


bit coeff12change = ??;
 int Coeff12(){
if(coeff12change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff13change = ??;
 int Coeff13(){
if(??){
return 0;}

return coeff13change;
}

bit coeff14change = ??;
 int Coeff14(){
if(coeff14change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff15change = ??;
 int Coeff15(){
if(coeff15change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff16change = ??;
 int Coeff16(){
if(??){
return 0;}

return coeff16change;
}

bit coeff17change = ??;
 int Coeff17(){
if(coeff17change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff18change = ??;
 int Coeff18(){
if(coeff18change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff19change = ??;
 int Coeff19(){
if(coeff19change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff20change = ??;
 int Coeff20(){
if(coeff20change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff21change = ??;
 int Coeff21(){
if(??){
return 0;}

return coeff21change;
}

bit coeff22change = ??;
 int Coeff22(){
if(coeff22change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff23change = ??;
 int Coeff23(){
if(coeff23change == 0){
return 1;}

if(??){
return 0;}

return -1;
}


int[10] lineArray;
int[10] aArray = {0,0,0,0,0,0,0,0,0,0};
int[10] bArray = {0,0,0,0,0,0,0,0,0,0};
int[10] cArray = {0,0,0,0,0,0,0,0,0,0};
int[10] b2Array = {0,0,0,0,0,0,0,0,0,0};
int[10] a2Array = {0,0,0,0,0,0,0,0,0,0};
int[10] c2Array = {0,0,0,0,0,0,0,0,0,0};


int[10] stackArray;
int cfinal = 0;
int finalcount = 0;
int count = -1;
int funcCount = -1;
 int SimpleJava(){
funcCount++;
int linehit = 0;
(count)++;
stackArray[count] = funcCount;
lineArray[count] = 3;

int a = 2 + ((Coeff0()) * (Coeff1()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 4;
aArray[count] = a;

int b = (((Coeff2()) * (SimpleJava2())) + ((Coeff3()) * a)) + ((Coeff4()) * (Coeff5()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 5;
aArray[count] = a;
bArray[count] = b;

int c = (((((Coeff11()) * a) + ((Coeff10()) * b)) + ((Coeff6()) * a)) + ((Coeff7()) * b)) + ((Coeff8()) * (Coeff9()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 6;
aArray[count] = a;
bArray[count] = b;
cArray[count] = c;
(linehit)++;
if(linehit == (??)){
cfinal = c;
finalcount = count;
return 0;
}


return c;


funcCount--;
}
 int SimpleJava2(){
funcCount++;
int linehit = 0;
(count)++;
stackArray[count] = funcCount;
lineArray[count] = 10;

int a2 = 2 + ((Coeff12()) * (Coeff13()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 11;
a2Array[count] = a2;

int b2 = ((((Coeff17()) * a2) + 1) + ((Coeff14()) * a2)) + ((Coeff15()) * (Coeff16()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 12;
b2Array[count] = b2;
a2Array[count] = a2;

int c2 = (((((Coeff23()) * a2) + ((Coeff22()) * b2)) + ((Coeff18()) * b2)) + ((Coeff19()) * a2)) + ((Coeff20()) * (Coeff21()));

(count)++;
stackArray[count] = funcCount;
lineArray[count] = 13;
b2Array[count] = b2;
a2Array[count] = a2;
c2Array[count] = c2;

return c2;


funcCount--;
}
int getMin(int a, int b, int c)
{
if(a <= b)
{
if(a <= c)
{
return a;
}
else
{
return c;
}
}
else
{
if(b <= c)
{
return b;
}
else
{
return c;
}
}
}
int abs(int a, int b)
{
int c = (a - b);
if(c > 0)
{
return c;
}
else
{
return -c;
}
}
int getDistance(int[5] ori, int[10] tar)
{
int n = 5;
int m =10;
int[m+1][n+1] f;
for(int i = 0;i<= n;i++)
{
f[i][0] = 0;
}
for(int i = 0;i<= m;i++)
{
f[0][m] = 0;
}
for(int j = 1;j<=m;j++)
{
if (tar[j-1] == 0)
{
return f[n][j-1];
}
for(int i = 1; i<=n;i++)
{
if(ori[i-1] == tar[j-1])
{
f[i][j] = f[i-1][j-1];
}
else
{
int add = f[i][j-1] + 1;
int del = f[i-1][j] + 1;
int rep = f[i-1][j-1] + 1;
f[i][j] = getMin(add, del, rep);
}
}
}
return f[n][m];
}
harness void Constraint(){
int[5] oringianlStackArray = {0,0,0,0,0};
int[5] oringianlaArray = {0,2,2,2,2};
int[5] oringianlbArray = {0,0,0,5,5};
int[5] oringianlcArray = {0,0,0,0,7};
int[5] oringianlb2Array = {0,0,0,0,0};
int[5] oringianla2Array = {0,0,0,0,0};
int[5] oringianlc2Array = {0,0,0,0,0};
int[5] oringianllineArray = {3,4,4,5,6};
int correctFinal_c = 9;
SimpleJava();
int SyntacticDistance = 0;
int SemanticDistance = 0;
for(int i = 0; i < 5; (i)++){
if((i) <= (count)){
SemanticDistance += ((aArray[i]) != (oringianlaArray[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
SemanticDistance += ((bArray[i]) != (oringianlbArray[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
SemanticDistance += ((cArray[i]) != (oringianlcArray[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
SemanticDistance += ((b2Array[i]) != (oringianlb2Array[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
SemanticDistance += ((a2Array[i]) != (oringianla2Array[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
SemanticDistance += ((c2Array[i]) != (oringianlc2Array[i])) || ((stackArray[i]) != (oringianlStackArray[i]));
}
}

SemanticDistance += getDistance(oringianlStackArray, stackArray);
SyntacticDistance += coeff0change;
SyntacticDistance += coeff1change;
SyntacticDistance += coeff2change;
SyntacticDistance += coeff3change;
SyntacticDistance += coeff4change;
SyntacticDistance += coeff5change;
SyntacticDistance += coeff6change;
SyntacticDistance += coeff7change;
SyntacticDistance += coeff8change;
SyntacticDistance += coeff9change;
SyntacticDistance += coeff10change;
SyntacticDistance += coeff11change;
SyntacticDistance += coeff12change;
SyntacticDistance += coeff13change;
SyntacticDistance += coeff14change;
SyntacticDistance += coeff15change;
SyntacticDistance += coeff16change;
SyntacticDistance += coeff17change;
SyntacticDistance += coeff18change;
SyntacticDistance += coeff19change;
SyntacticDistance += coeff20change;
SyntacticDistance += coeff21change;
SyntacticDistance += coeff22change;
SyntacticDistance += coeff23change;

assert (cfinal == correctFinal_c);
line3change = (coeff0change != 0) || (coeff1change != 0);
line4change = (((coeff2change != 0) || (coeff3change != 0)) || (coeff4change != 0)) || (coeff5change != 0);
line5change = (((((coeff6change != 0) || (coeff7change != 0)) || (coeff8change != 0)) || (coeff9change != 0)) || (coeff10change != 0)) || (coeff11change != 0);
line10change = (coeff12change != 0) || (coeff13change != 0);
line11change = (((coeff14change != 0) || (coeff15change != 0)) || (coeff16change != 0)) || (coeff17change != 0);
line12change = (((((coeff18change != 0) || (coeff19change != 0)) || (coeff20change != 0)) || (coeff21change != 0)) || (coeff22change != 0)) || (coeff23change != 0);
assert (((((((0 + line3change) + line4change) + line5change) + line10change) + line11change) + line12change) == 1);

minimize(SemanticDistance+5*SyntacticDistance);
}
