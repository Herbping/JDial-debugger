bit line6change = 0;
bit line8change = 0;
bit line9change = 0;
bit line5change = 0;

bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff1change = ??;
 int Coeff1(){
if(??){
return 0;}

return coeff1change;
}

bit coeff2change = ??;
 int Coeff2(){
if(coeff2change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff3change = ??;
 int Coeff3(){
if(coeff3change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff4change = ??;
 int Coeff4(){
if(??){
return 0;}

return coeff4change;
}

bit coeff5change = ??;
 int Coeff5(){
if(coeff5change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff6change = ??;
 int Coeff6(){
if(coeff6change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff7change = ??;
 int Coeff7(){
if(coeff7change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff8change = ??;
 int Coeff8(){
if(??){
return 0;}

return coeff8change;
}

bit coeff9change = ??;
 int Coeff9(){
if(coeff9change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff10change = ??;
 int Coeff10(){
if(??){
return 0;}

return coeff10change;
}


int[12] lineArray;
int[12] iArray = {0,0,0,0,0,0,0,0,0,0,0,0};
int[12] kArray = {0,0,0,0,0,0,0,0,0,0,0,0};
int[12] cArray = {0,0,0,0,0,0,0,0,0,0,0,0};


int kfinal = 0;
int k2 = 0;
int k3 = 0;
int k5 = 0;
int sfinal = 0;
int k2 = 0;
int k3 = 0;
int k5 = 0;
int cfinal = 0;
int k2 = 0;
int k3 = 0;
int k5 = 0;
int finalcount = 0;
int count = -1;

 int FindC(){
int linehit = 0;
(count)++;
lineArray[count] = 6;

int k = 3 + ((Coeff0()) * (Coeff1()));
k2 = ( 3 + ((Coeff0()) * (Coeff1()))) % 2;
k3 = ( 3 + ((Coeff0()) * (Coeff1()))) % 3;
k5 = ( 3 + ((Coeff0()) * (Coeff1()))) % 5;

(count)++;
lineArray[count] = 7;
kArray[count] = k;

int[] s = {1,2,3,4};

(count)++;
lineArray[count] = 8;
kArray[count] = k;

int c = (4 + ((Coeff2()) * k)) + ((Coeff3()) * (Coeff4()));
int c2 = ( (4 + ((Coeff2()) * k2)) + ((Coeff3()) * (Coeff4()))) % 2;
int c3 = ( (4 + ((Coeff2()) * k3)) + ((Coeff3()) * (Coeff4()))) % 3;
int c5 = ( (4 + ((Coeff2()) * k5)) + ((Coeff3()) * (Coeff4()))) % 5;

(count)++;
lineArray[count] = 9;
kArray[count] = k;
cArray[count] = c;

for(int i = ((0 + ((Coeff5()) * k)) + ((Coeff6()) * c)) + ((Coeff7()) * (Coeff8())); ((i - k) + ((Coeff9()) * (Coeff10()))) < 0; (i)++){
(count)++;
lineArray[count] = 9;
iArray[count] = i;
kArray[count] = k;
cArray[count] = c;

(count)++;
lineArray[count] = 10;
kArray[count] = k;
cArray[count] = c;

if(c){
(count)++;
lineArray[count] = 11;
iArray[count] = i;
kArray[count] = k;
cArray[count] = c;

return 1;

(count)++;
lineArray[count] = 11;
iArray[count] = i;
kArray[count] = k;
cArray[count] = c;

}




(count)++;
lineArray[count] = 9;
iArray[count] = i;
kArray[count] = k;
cArray[count] = c;

}


(count)++;
lineArray[count] = 9;
kArray[count] = k;
cArray[count] = c;


(count)++;
lineArray[count] = 13;
kArray[count] = k;
cArray[count] = c;
(linehit)++;
if(linehit == 1){
kfinal = k;
cfinal = c;
finalcount = count;
return 0;
}


return 0;


}

harness void Constraint(){
int[6] oringianliArray = {0,0,0,0,0,0};
int[6] oringianlkArray = {0,3,3,3,3,3};
int[6] oringianlsArray = {0,0};
int[6] oringianlcArray = {0,0,0,4,4,4};
int[6] oringianllineArray = {6,7,8,9,9,10};
int correctFinal_k = 3;
int correctFinal_s = 143;
int correctFinal_c = 4;
FindC();
int SyntacticDistance = 0;
int SemanticDistance = 0;
for(int i = 0; i < 6; (i)++){
SemanticDistance += (iArray[i]) != (oringianliArray[i]);
SemanticDistance += (kArray[i]) != (oringianlkArray[i]);
SemanticDistance += (cArray[i]) != (oringianlcArray[i]);
SemanticDistance += (lineArray[i]) != (oringianllineArray[i]);
}

SyntacticDistance += coeff0change;
SyntacticDistance += coeff1change;
SyntacticDistance += coeff2change;
SyntacticDistance += coeff3change;
SyntacticDistance += coeff4change;
SyntacticDistance += coeff5change;
SyntacticDistance += coeff6change;
SyntacticDistance += coeff7change;
SyntacticDistance += coeff8change;
SyntacticDistance += coeff9change;
SyntacticDistance += coeff10change;

assert (k2 % 2 == correctFinal_k %2);
assert (k3 % 3 == correctFinal_k %3);
assert (k5 % 5 == correctFinal_k %5);
assert (k2 % 2 == correctFinal_k %2);
assert (k3 % 3 == correctFinal_k %3);
assert (k5 % 5 == correctFinal_k %5);
assert (k2 % 2 == correctFinal_k %2);
assert (k3 % 3 == correctFinal_k %3);
assert (k5 % 5 == correctFinal_k %5);
minimize(SemanticDistance+5*SyntacticDistance);
}
