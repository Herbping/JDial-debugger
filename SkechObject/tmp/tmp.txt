bit line3change = 0;
bit line4change = 0;

bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff1change = ??;
 int Coeff1(){
if(??){
return 0;}

return coeff1change;
}

bit coeff2change = ??;
 int Coeff2(){
if(coeff2change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff3change = ??;
 int Coeff3(){
if(coeff3change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff4change = ??;
 int Coeff4(){
if(coeff4change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff5change = ??;
 int Coeff5(){
if(??){
return 0;}

return coeff5change;
}

bit coeff6change = ??;
 int Coeff6(){
if(coeff6change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff7change = ??;
 int Coeff7(){
if(coeff7change == 0){
return 1;}

if(??){
return 0;}

return -1;
}


int[6] lineArray;
int[6] bArray = {0,0,0,0,0,0};
int[6] cArray = {0,0,0,0,0,0};


int cfinal = 0;
int finalcount = 0;
int count = -1;
int[10] resArray = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int funcCount = -1;
 int SimpleJava(int a){
(funcCount)++;
int linehit = 0;
(count)++;
lineArray[count] = 3;

int b = (((Coeff2()) * a) + 1) + ((Coeff0()) * (Coeff1()));
int b2 = ( (((Coeff2()) * a2) + 1) + ((Coeff0()) * (Coeff1()))) % 2;
int b3 = ( (((Coeff2()) * a3) + 1) + ((Coeff0()) * (Coeff1()))) % 3;
int b5 = ( (((Coeff2()) * a5) + 1) + ((Coeff0()) * (Coeff1()))) % 5;
int b7 = ( (((Coeff2()) * a7) + 1) + ((Coeff0()) * (Coeff1()))) % 7;

(count)++;
lineArray[count] = 4;
bArray[count] = b;

int c = ((((Coeff7()) * a) + ((Coeff6()) * b)) + ((Coeff3()) * b)) + ((Coeff4()) * (Coeff5()));
c2 = ( ((((Coeff7()) * a2) + ((Coeff6()) * b2)) + ((Coeff3()) * b2)) + ((Coeff4()) * (Coeff5()))) % 2;
c3 = ( ((((Coeff7()) * a3) + ((Coeff6()) * b3)) + ((Coeff3()) * b3)) + ((Coeff4()) * (Coeff5()))) % 3;
c5 = ( ((((Coeff7()) * a5) + ((Coeff6()) * b5)) + ((Coeff3()) * b5)) + ((Coeff4()) * (Coeff5()))) % 5;
c7 = ( ((((Coeff7()) * a7) + ((Coeff6()) * b7)) + ((Coeff3()) * b7)) + ((Coeff4()) * (Coeff5()))) % 7;

(count)++;
lineArray[count] = 5;
bArray[count] = b;
cArray[count] = c;
(linehit)++;
if(linehit == 1){
resArray[funcCount] = c;
finalcount = count;
}


return c;


}


int getMin(int a, int b, int c)
{
if(a <= b)
{
if(a <= c)
{
return a;
}
else
{
return c;
}
}
else
{
if(b <= c)
{
return b;
}
else
{
return c;
}
}
}
int abs(int a, int b)
{
int c = (a - b);
if(c > 0)
{
return c;
}
else
{
return -c;
}
}
int getDistance(int[17] ori, int[24] tar)
{
int n = 17;
int m =24;
int[m+1][n+1] f;
for(int i = 0;i<= n;i++)
{
f[i][0] = 0;
}
for(int i = 0;i<= m;i++)
{
f[0][m] = 0;
}
for(int j = 1;j<=m;j++)
{
if (tar[j-1] == 0)
{
return f[n][j-1];
}
for(int i = 1; i<=n;i++)
{
if(ori[i-1] == tar[j-1])
{
f[i][j] = f[i-1][j-1];
}
else
{
int add = f[i][j-1] + 1;
int del = f[i-1][j] + 1;
int rep = f[i-1][j-1] + 1;
f[i][j] = getMin(add, del, rep);
}
}
}
return f[n][m];
}
harness void Constraint(){
int[3] oringianlbArray = {0,7,7};
int[3] oringianlcArray = {0,0,13};
int[3] oringianllineArray = {3,4,5};
int correctFinal_c = 20;
SimpleJava(6);
int SyntacticDistance = 0;
int SemanticDistance = 0;
for(int i = 0; i < 3; (i)++){
SemanticDistance += (bArray[i]) != (oringianlbArray[i]);
SemanticDistance += (cArray[i]) != (oringianlcArray[i]);
SemanticDistance += (lineArray[i]) != (oringianllineArray[i]);
}

SyntacticDistance += coeff0change;
SyntacticDistance += coeff1change;
SyntacticDistance += coeff2change;
SyntacticDistance += coeff3change;
SyntacticDistance += coeff4change;
SyntacticDistance += coeff5change;
SyntacticDistance += coeff6change;
SyntacticDistance += coeff7change;

assert (resArray[0] == correctFinal_c %2 || resArray[1] == correctFinal_c %2 ||
resArray[2] == correctFinal_c %2 || resArray[3] == correctFinal_c %2 ||
resArray[4] == correctFinal_c %2 || resArray[5] == correctFinal_c %2 ||
resArray[6] == correctFinal_c %2 || resArray[7] == correctFinal_c %2 ||
resArray[8] == correctFinal_c %2 || resArray[9] == correctFinal_c %2);
assert (c3 % 3 == correctFinal_c %3);
assert (c5 % 5 == correctFinal_c %5);
assert (c7 % 7 == correctFinal_c %7);
line3change = ((coeff0change != 0) || (coeff1change != 0)) || (coeff2change != 0);
line4change = ((((coeff3change != 0) || (coeff4change != 0)) || (coeff5change != 0)) || (coeff6change != 0)) || (coeff7change != 0);
assert (((0 + line3change) + line4change) == 1);

minimize(SemanticDistance+5*SyntacticDistance);
}
