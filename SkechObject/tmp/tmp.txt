bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff1change = ??;
 int Coeff1(){
if(coeff1change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

int coeff2change = ??;
 int Coeff2(){
if(??){
return 0;}

return coeff2change;
}

bit coeff5change = ??;
 int Coeff5(){
if(coeff5change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff6change = ??;
 int Coeff6(){
if(coeff6change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

int coeff7change = ??;
 int Coeff7(){
if(??){
return 0;}

return coeff7change;
}


int[6] lineArray;


int xfinal = 0;
int yfinal = 0;
int zfinal = 0;
int finalcount = 0;

 int max3(int x, int y, int z){
int count = -1;
int linehit = 0;
(count)++;
lineArray[count] = 6;

if((((Coeff1()) * x) - (((Coeff0()) * y) + (Coeff2()))) > 0){
(count)++;
lineArray[count] = 6;

y = ((Coeff3()) * x) + (Coeff4());

(count)++;
lineArray[count] = 6;

}


(count)++;
lineArray[count] = 7;

if((((Coeff6()) * y) - (((Coeff5()) * z) + (Coeff7()))) > 0){
(count)++;
lineArray[count] = 7;

z = ((Coeff8()) * x) + (Coeff9());

(count)++;
lineArray[count] = 7;

}


(count)++;
lineArray[count] = 8;
(linehit)++;
if(linehit == 1){
xfinal = x;
yfinal = y;
zfinal = z;
finalcount = count;
return 0;
}


return z;



}

harness void HammingTest(){
int[3] oringianllineArray = {6,7,8};
int correctFinal_x = 3;
int correctFinal_y = 5;
int correctFinal_z = 5;
max3(3, 5, 1);
int HammingDistance = 0;
int EditDistance = 0;
EditDistance += coeff0change;
EditDistance += coeff1change;
EditDistance += coeff2change;
EditDistance += coeff3change;
EditDistance += coeff4change;
EditDistance += coeff5change;
EditDistance += coeff6change;
EditDistance += coeff7change;
EditDistance += coeff8change;
EditDistance += coeff9change;

for(int i = 0; i < 3; (i)++){
HammingDistance += (lineArray[i]) != (oringianllineArray[i]);
}

assert (xfinal == correctFinal_x);
assert (yfinal == correctFinal_y);
assert (zfinal == correctFinal_z);
minimize(EditDistance);
minimize(HammingDistance);
}
