 int External_Mathpow(int p0, int p1){
return ??;
}
bit const0change = ??;
 int Const0(){
if(const0change == 1){
return ??;}else{
return 0;}
}

bit const1change = ??;
 int Const1(){
if(const1change == 1){
return ??;}else{
return 0;}
}


int[26] lineArray;
int[26] sumArray = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[26] iArray = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int sumfinal = 0;
int finalcount = 0;

 int SimpleJava(int n){
int count = -1;
int linehit = 0;
(count)++;
lineArray[count] = 4;

int sum = Const0();

(count)++;
lineArray[count] = 5;
sumArray[count] = sum;

for(int i = Const1(); i < n; (i)++){
(count)++;
lineArray[count] = 5;
sumArray[count] = sum;
iArray[count] = i;

(count)++;
lineArray[count] = 6;
sumArray[count] = sum;
iArray[count] = i;
(linehit)++;
if(linehit == 4){
sumfinal = sum;
finalcount = count;
return 0;
}


sum += External_Mathpow(n, i);



(count)++;
lineArray[count] = 5;
sumArray[count] = sum;
iArray[count] = i;

}


(count)++;
lineArray[count] = 5;
sumArray[count] = sum;


(count)++;
lineArray[count] = 8;
sumArray[count] = sum;

return sum;



}

harness void HammingTest(){
int[13] oringianlsumArray = {0,0,0,0,1,1,1,6,6,6,31,31,31};
int[13] oringianliArray = {0,0,0,0,0,1,1,1,2,2,2,3,3};
int correctFinal_sum = 30;
SimpleJava(5);
int HammingDistance = 0;
for(int i = 0; i < 13; (i)++){
if(const0change == 0){
HammingDistance += (sumArray[i]) != (oringianlsumArray[i]);}

if(const1change == 0){
HammingDistance += (iArray[i]) != (oringianliArray[i]);}

}

assert (sumfinal == correctFinal_sum);
assert ((const0change + const1change) == 1);
minimize(HammingDistance);
}
