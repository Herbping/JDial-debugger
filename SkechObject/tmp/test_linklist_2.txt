bit line4change = 0;
bit line5change = 0;
bit line6change = 0;
bit line7change = 0;
bit line8change = 0;
bit line9change = 0;
bit line10change = 0;
bit line11change = 0;
bit line13change = 0;

bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff1change = ??;
 int Coeff1(){
if(??){
return 0;}

return coeff1change;
}

bit coeff2change = ??;
 int Coeff2(){
if(coeff2change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff3change = ??;
 int Coeff3(){
if(coeff3change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff4change = ??;
 int Coeff4(){
if(coeff4change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff5change = ??;
 int Coeff5(){
if(??){
return 0;}

return coeff5change;
}

bit coeff6change = ??;
 int Coeff6(){
if(coeff6change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff7change = ??;
 int Coeff7(){
if(coeff7change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff8change = ??;
 int Coeff8(){
if(coeff8change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff9change = ??;
 int Coeff9(){
if(coeff9change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff10change = ??;
 int Coeff10(){
if(??){
return 0;}

return coeff10change;
}

bit coeff11change = ??;
 int Coeff11(){
if(coeff11change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff12change = ??;
 int Coeff12(){
if(coeff12change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff13change = ??;
 int Coeff13(){
if(coeff13change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff14change = ??;
 int Coeff14(){
if(coeff14change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff15change = ??;
 int Coeff15(){
if(??){
return 0;}

return coeff15change;
}

bit coeff16change = ??;
 int Coeff16(){
if(coeff16change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff17change = ??;
 int Coeff17(){
if(??){
return 0;}

return coeff17change;
}

bit coeff18change = ??;
 int Coeff18(){
if(coeff18change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff19change = ??;
 int Coeff19(){
if(coeff19change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff20change = ??;
 int Coeff20(){
if(coeff20change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff21change = ??;
 int Coeff21(){
if(coeff21change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff22change = ??;
 int Coeff22(){
if(coeff22change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff23change = ??;
 int Coeff23(){
if(??){
return 0;}

return coeff23change;
}

bit coeff24change = ??;
 int Coeff24(){
if(coeff24change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff25change = ??;
 int Coeff25(){
if(??){
return 0;}

return coeff25change;
}

bit coeff26change = ??;
 int Coeff26(){
if(coeff26change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff27change = ??;
 int Coeff27(){
if(coeff27change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff28change = ??;
 int Coeff28(){
if(coeff28change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff29change = ??;
 int Coeff29(){
if(coeff29change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff30change = ??;
 int Coeff30(){
if(??){
return 0;}

return coeff30change;
}

bit coeff31change = ??;
 int Coeff31(){
if(coeff31change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff32change = ??;
 int Coeff32(){
if(??){
return 0;}

return coeff32change;
}

bit coeff33change = ??;
 int Coeff33(){
if(coeff33change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff34change = ??;
 int Coeff34(){
if(coeff34change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff35change = ??;
 int Coeff35(){
if(coeff35change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

bit coeff36change = ??;
 int Coeff36(){
if(coeff36change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff37change = ??;
 int Coeff37(){
if(??){
return 0;}

return coeff37change;
}

bit coeff38change = ??;
 int Coeff38(){
if(coeff38change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff39change = ??;
 int Coeff39(){
if(coeff39change == 0){
return 1;}

if(??){
return 0;}

return -1;
}


struct Anode{
    int lineval;
    int ival;
    int minval;
    int maxval;
    int Nval;
    int resultval;
    Anode prev;
    int ct;
}


Anode dataArray = new Anode(lineval = 0, ival = 0, minval = 0, maxval = 0, Nval = 0, resultval = 0, prev = null, ct = -1);


int maxfinal = 0;
int finalcount = 0;
int count = -1;

 int largestGap(){
int linehit = 0;
(count)++;
dataArray = new Anode(lineval = 3, ival = 0, minval = 0, maxval = 0, Nval = 0, resultval = 0, prev = dataArray, ct = count);
int[] x = {13,5,4};

(count)++;
dataArray = new Anode(lineval = 4, ival = 0, minval = 0, maxval = 0, Nval = 0, resultval = 0, prev = dataArray, ct = count);

int N = 3 + ((Coeff0()) * (Coeff1()));

(count)++;
dataArray = new Anode(lineval = 5, ival = 0, minval = 0, maxval = 0, Nval = N, resultval = 0, prev = dataArray, ct = count);

int max = (((Coeff2()) * (x[N - 1])) + ((Coeff3()) * N)) + ((Coeff4()) * (Coeff5()));

(count)++;
dataArray = new Anode(lineval = 6, ival = 0, minval = 0, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

int min = ((((Coeff6()) * (x[N - 1])) + ((Coeff7()) * max)) + ((Coeff8()) * N)) + ((Coeff9()) * (Coeff10()));

(count)++;
dataArray = new Anode(lineval = 7, ival = 0, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

(linehit)++;
if(linehit == 3){
maxfinal = max;
finalcount = count;
return 0;
}


for(int i = (((1 + ((Coeff11()) * min)) + ((Coeff12()) * max)) + ((Coeff13()) * N)) + ((Coeff14()) * (Coeff15())); ((i - (N - 1)) + ((Coeff31()) * (Coeff32()))) < 0; (i)++){
(count)++;
dataArray = new Anode(lineval = 7, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

(linehit)++;
if(linehit == 3){
maxfinal = max;
finalcount = count;
return 0;
}


(count)++;
dataArray = new Anode(lineval = 8, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

if(((max - (x[i])) + ((Coeff16()) * (Coeff17()))) < 0){
(count)++;
dataArray = new Anode(lineval = 9, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

max = (((((Coeff18()) * (x[i])) + ((Coeff19()) * i)) + ((Coeff20()) * min)) + ((Coeff21()) * N)) + ((Coeff22()) * (Coeff23()));

(count)++;
dataArray = new Anode(lineval = 9, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);
}


(count)++;
dataArray = new Anode(lineval = 10, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

if(((min - (x[i])) + ((Coeff24()) * (Coeff25()))) > 0){
(count)++;
dataArray = new Anode(lineval = 11, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

min = ((((Coeff26()) * (x[i])) + ((Coeff27()) * i)) + ((Coeff28()) * N)) + ((Coeff29()) * (Coeff30()));

(count)++;
dataArray = new Anode(lineval = 11, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

}




(count)++;
dataArray = new Anode(lineval = 7, ival = i, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);
(linehit)++;

if(linehit == 3){
maxfinal = max;
finalcount = count;
return 0;
}


}


(count)++;
dataArray = new Anode(lineval = 7, ival = 0, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);
(linehit)++;
if(linehit == 3){
maxfinal = max;
finalcount = count;
return 0;
}



(count)++;
dataArray = new Anode(lineval = 13, ival = 0, minval = min, maxval = max, Nval = N, resultval = 0, prev = dataArray, ct = count);

int result = ((((((Coeff39()) * max) - ((Coeff38()) * min)) + ((Coeff33()) * min)) + ((Coeff34()) * max)) + ((Coeff35()) * N)) + ((Coeff36()) * (Coeff37()));

(count)++;
dataArray = new Anode(lineval = 14, ival = 0, minval = min, maxval = max, Nval = N, resultval = result, prev = dataArray, ct = count);

return result;


}

harness void Constraint(){
int[10] oringianlxArray = {0};
int[10] oringianlresultArray = {0,0,0,0,0,0,0,0,0,0};
int[10] oringianliArray = {0,0,0,0,0,1,1,1,1,1};
int[10] oringianlminArray = {0,0,0,0,4,4,4,4,4,4};
int[10] oringianlmaxArray = {0,0,0,4,4,4,4,4,5,5};
int[10] oringianlNArray = {0,0,3,3,3,3,3,3,3,3};
int[10] oringianllineArray = {3,4,5,6,7,7,8,9,10,7};
int correctFinal_max = 13;
largestGap();
int SyntacticDistance = 0;
int SemanticDistance = 0;


if(dataArray != null)
while(dataArray.ct > 9){
if(dataArray !=null)
	dataArray = dataArray.prev;
}

if(dataArray != null)
while(dataArray.ct < 9){
dataArray = new Anode(lineval = 0, ival = 0, minval = 0, maxval = 0, Nval = 0, resultval = 0, prev = dataArray, ct = dataArray.ct+1);
}

for(int i = 9; i >=10; (i)--){
SemanticDistance += (dataArray.resultval) != (oringianlresultArray[i]);
SemanticDistance += (dataArray.ival) != (oringianliArray[i]);
SemanticDistance += (dataArray.minval) != (oringianlminArray[i]);
SemanticDistance += (dataArray.maxval) != (oringianlmaxArray[i]);
SemanticDistance += (dataArray.Nval) != (oringianlNArray[i]);
SemanticDistance += (dataArray.lineval) != (oringianllineArray[i]);
if(dataArray !=null)
	dataArray = dataArray.prev;
}

SyntacticDistance += coeff0change;
SyntacticDistance += coeff1change;
SyntacticDistance += coeff2change;
SyntacticDistance += coeff3change;
SyntacticDistance += coeff4change;
SyntacticDistance += coeff5change;
SyntacticDistance += coeff6change;
SyntacticDistance += coeff7change;
SyntacticDistance += coeff8change;
SyntacticDistance += coeff9change;
SyntacticDistance += coeff10change;
SyntacticDistance += coeff11change;
SyntacticDistance += coeff12change;
SyntacticDistance += coeff13change;
SyntacticDistance += coeff14change;
SyntacticDistance += coeff15change;
SyntacticDistance += coeff16change;
SyntacticDistance += coeff17change;
SyntacticDistance += coeff18change;
SyntacticDistance += coeff19change;
SyntacticDistance += coeff20change;
SyntacticDistance += coeff21change;
SyntacticDistance += coeff22change;
SyntacticDistance += coeff23change;
SyntacticDistance += coeff24change;
SyntacticDistance += coeff25change;
SyntacticDistance += coeff26change;
SyntacticDistance += coeff27change;
SyntacticDistance += coeff28change;
SyntacticDistance += coeff29change;
SyntacticDistance += coeff30change;
SyntacticDistance += coeff31change;
SyntacticDistance += coeff32change;
SyntacticDistance += coeff33change;
SyntacticDistance += coeff34change;
SyntacticDistance += coeff35change;
SyntacticDistance += coeff36change;
SyntacticDistance += coeff37change;
SyntacticDistance += coeff38change;
SyntacticDistance += coeff39change;

assert (maxfinal == correctFinal_max);
minimize(SemanticDistance+5*SyntacticDistance);
}
